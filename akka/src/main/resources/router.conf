router{
  akka.actor.deployment {
    /parent/router1 { #轮询
      router = round-robin-pool
      nr-of-instances = 5
    }

    /parent/router2 { #随机方式分发消息
       	router = random-pool
       	nr-of-instances = 5
       	resizer { #指定最大最小的Routee的数量
              lower-bound = 2
              upper-bound = 15
            }
     }

    /parent/router3 { #均衡分发消息,所有的子Routee共享一个邮箱,它会尝试重新从繁忙routee分配任务到空闲routee
       	router = balancing-pool
       	nr-of-instances = 5
     }

     /parent/router4 { #最少消息邮箱分发
        outer = smallest-mailbox-pool
        nr-of-instances = 5
      }

      /parent/router5 { #广播消息
         router = broadcast-pool
         nr-of-instances = 5
      }

      /parent/router6 { #消息发送到它所有的子Routee中,然后它会等待直到接收到第一个答复,该结果将发送回原始发送者.而其他的答复将会被丢弃.
         router = scatter-gather-pool
         nr-of-instances = 5
         within = 10 seconds
       }

       /parent/router7 { #这个Router将首先发送消息到一个随机挑取的routee,短暂的延迟后发给第二个routee(从剩余的routee中随机挑选),
                          #以此类推.它等待第一个答复,并将它转回给原始发送者.其他答复将被丢弃.这样设计的目的在于使用冗余来加快分布式情况下的查询等业务.
          	router = tail-chopping-pool
          	nr-of-instances = 5
          	within = 10 seconds
          	tail-chopping-router.interval = 20 milliseconds
        }

        /parent/router8 { #使用一致性hash的方式来分发消息.它会把传送的消息映射到它的消息环上,然后进行Actor的选择.
           	router = consistent-hashing-pool
           	nr-of-instances = 5
           	virtual-nodes-factor = 10
         }
  }
}